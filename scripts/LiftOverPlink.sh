#!/usr/bin/bash
#This scripts takes as input a plink 1 set of files (.bim, .bed, /.fam) and lifts over to a different build. Always do liftover in one step (e.g. hg17-> hg19 instead of hg17-> hg18-> hg19).
#I made this bash script to organize things but the lifting itself uses a script I found here:
#you need this script as well as 
start=`date +%s`
optstring=":ciodma"
while getopts ${optstring} arg; 
    do
    case "${arg}" in
    c) echo "Option 'c' was called" ;;
    i) echo "Option 'i' was called" ;;
    o) echo "Option 'o' was called" ;;
    d) echo "Option 'd' was called" ;;
    m) echo "Option 'm' was called" ;;
    a) echo "Option 'a' was called" ;;
    
    ?)
    echo "Invalid option: -${OPTARG}."
    echo
    usage
    ;;
    esac
done
    c) chain=${OPTARG};; 
    i) input=${OPTARG};; 
    o) output=${OPTARG};;
    d) tmp=$OPTARG};;
    m) main=${OPTARG};;
    a) aux=${OPTARG};;
    esac 
done 
echo "Given chain file is: " $chain
sleep 10
#chain=tmp-dir/hg19ToHg38.over.chain.gz #full path to chain file for liftover (downloaded from UCSC)
#path_source=tmp-dir/hrs_afr_hg19_hm3_2 #full path to input file
#path_output=to_delete/UKB_EUR_hg19_filt #full path to output file
#from=hg19 #build before liftover
#to=hg38 #build after liftover
#tmp=tmp-dir/ #keep intermediate files here
#path_python_script=scripts/LiftOverPlink.py #I didn't write this script. I copied it from here: https://github.com/sritchie73/liftOverPlink/blob/master/liftOverPlink.py
#aux=scripts/rmBadLifts.py #auxiliary file
#rs_to_chr_pos==TRUE #boolean; do you want your snp IDs in the format chr_pos?
#NOTE: that python script was written in python 2 so I made some minor adjustments to make it work for python 3.

plink --bfile ${path_source} --recode --out ${tmp}genotypes --threads 10 
sleep 10
#Create a "lifted" MAP file.
python ${path_python_script} --map ${tmp}genotypes.map --out ${tmp}lifted --chain ${chain} &
wait %1
#Remove bad lifted SNPs from that MAP file.
python ${aux} --map ${tmp}lifted.map --out ${tmp}good_lifted.map --log ${tmp}bad_lifted.dat
cut -f 2 ${tmp}bad_lifted.dat > ${tmp}to_exclude.dat
cut -f 4 ${tmp}lifted.bed.unlifted | sed "/^#/d" >> ${tmp}to_exclude.dat 
# Note: this will clobber the lifted MAP file generated by `liftOverPlink`:
#Generate a good PED file by excluding "unlifted", and bad "lifted" SNPs.
plink --file ${tmp}genotypes --recode --out ${tmp}lifted --exclude ${tmp}to_exclude.dat --threads 20
tr '\r' '\n' < ${tmp}lifted.ped > ${tmp}tmp1 && mv ${tmp}tmp1 ${tmp}lifted.ped
plink --ped ${tmp}lifted.ped --map ${tmp}good_lifted.map --recode --make-bed --out ${tmp}final --threads 20
awk '$5==0' ${tmp}final.bim|cut -f2 > ${tmp}exclude.txt
awk '$5==0' ${tmp}final.bim|cut -f2 >> ${tmp}exclude.txt
sort ${tmp}exclude.txt |uniq > ${tmp}tmp1 && mv ${tmp}tmp1 ${tmp}exclude.txt
#Combine the fixed PED file, with the fixed MAP file.
#convert to .bim/fam/bed
plink --bfile ${tmp}final --exclude ${tmp}exclude.txt --make-bed --out ${tmp}final2 --threads 20

if [ rs_to_chr_pos==TRUE ];
plink2 --bfile ${tmp}final2 --set-all-var-ids @_\# --make-bed --out ${path_output} --threads 20
else
plink --bfile ${tmp}final2 --make-bed --out ${path_output} --threads 20
fi

rm ${tmp}genotypes*
rm ${tmp}*lifted*
rm ${tmp}*exclude*
rm ${tmp}final*
rm ${tmp}exclude
